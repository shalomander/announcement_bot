import json
import logging
from callback_middleware import (
    callback_middleware, callback_middleware_inline_bot,
)

from config import (
    ADMIN_SPACE_NAME,
    USER_SPACE_NAME,
)
from tarantool_utils import (
    replace, select_index, exist_index
)
from text_middleware import (
    text_middleware_inline_bot
)
import utilities as util

log = logging.getLogger(__name__)
main_bot_callbacks = {}


async def start(bot, event):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param event: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
    :return: –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ
    """

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = event.data['from']['userId']

    replace(USER_SPACE_NAME, (
        USER_SPACE_NAME, '', '', ''
    ))
    inline_keyboard = [
        [{"text": "ü§ñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è @metabot", "callbackData": "call_back_instruction"}]
    ]
    await bot.send_text(
        chat_id=user,
        text=(
            "–ü—Ä–∏–≤–µ—Ç, —è —Å–æ–∑–¥–∞—é –±–æ—Ç–æ–≤-–æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø\n\n"
            "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –±–æ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n"
            "- –¢—ã —Ö–æ—á–µ—à—å –∏–º–µ—Ç—å –µ–¥–∏–Ω—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ—Å—Ç–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª"
            " –≠—Ç–æ –≤–∞–∂–Ω–æ –≤ —Å–ª—É—á–∞–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –≤–µ–¥—É—â–∏—Ö –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª\n"
            "- –¢—ã —Ö–æ—á–µ—à—å –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö\n\n"
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:\n"
            "1) –°–æ–∑–¥–∞–π –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é @metabot (–ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ –∫–Ω–æ–ø–∫–µ \"ü§ñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è @metabot\")\n"
            f"2) –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ (@{bot.name}) —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–≤–æ–µ–º –Ω–æ–≤–æ–º –±–æ—Ç–µ –æ—Ç @metabot\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:\n"
            "https://files.icq.net/get/0aE48000e9N8zzuD0O1VBt5ed266931ae"
        ),
        inline_keyboard_markup=json.dumps(inline_keyboard)
    )


async def callbacks(bot, event):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ—É–∫–Ω—Ü–∏–π —Å –æ–±—Ä–∞—Ç–Ω—ã–º –≤—ã–∑–æ–≤–æ–º
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param event: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
    """

    user = event.data['from']['userId']

    callback_name = event.data['callbackData']

    if callback_name == 'callback_start':
        await bot.answer_callback_query(
            query_id=event.data['queryId'],
            text="",
            show_alert=False
        )
        await start(bot, event)

    else:
        await callback_middleware(
            bot,
            user,
            callback_name,
            event.data['queryId'],
            bot_callbacks=main_bot_callbacks,
            event=event
        )


async def message(bot, event):
    """
    –û–±—Ä–∞–±–æ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param event: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
    """
    user = event.data['from']['userId']
    message_id = event.data['msgId']

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ
        text = event.data['parts'][0]['payload']['message']['text']
    except KeyError:
        # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏
        text = event.data['text']

    try:
        secret_bot = util.parse_bot_info(text)
        if 'token' in secret_bot:
            if await util.validate_token(secret_bot['token']):
                replace(USER_SPACE_NAME, (
                    user,
                    secret_bot['token'], secret_bot['botId'], secret_bot['nick']
                ))
                await bot.send_text(
                    chat_id=user,
                    reply_msg_id=message_id,
                    text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞?",
                    inline_keyboard_markup=json.dumps([
                        [{"text": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å", "callbackData": "call_back_bot_connect"}],
                        [{"text": "–û—Ç–º–µ–Ω–∞", "callbackData": "callback_start"}],
                    ])
                )
            else:
                await bot.send_text(
                    chat_id=user,
                    reply_msg_id=message_id,
                    text="–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω\n"
                )
    except KeyError:
        pass


# Inline bot

async def start_inline_message(bot, event):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    :param bot:
    :param event:
    :return:
    """

    try:
        bot_name = bot.name
        user_id = event.data['from']['userId']
        is_admin = exist_index(
            ADMIN_SPACE_NAME, (
                user_id, bot_name
            ), index='admin_bot'
        )

        if is_admin:
            util.set_null_admin_tuple(
                user_id, bot_name
            )
            is_active = util.is_admin_active(
                user_id, bot_name
            )
            if is_active:
                button = "‚õî Ô∏è–í—ã–∫–ª—é—á–∏—Ç—å"
                button_action = 'disable'
                message_active = f'–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /off –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ "{button}"'
            else:
                button = "–í–∫–ª—é—á–∏—Ç—å"
                button_action = 'enable'
                message_active = f'–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /on –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ "{button}"'

            await bot.send_text(
                chat_id=user_id,
                text=(
                    f"–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –±–æ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ú–æ–π –Ω–∏–∫–Ω–µ–π–º @{bot_name}\n\n"
                    "1) –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –Ω–∞–∂–º–∏ \"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è\"\n"
                    "2) –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤,"
                    " –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏ \"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤\"\n"
                    f"3) @{message_active}\n"
                    "4) –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ —Ç–µ–∫—Å—Ç\n"
                    "5) –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n"
                    "- –ï–¥–∏–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª\n"
                    "- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–≤—Å–µ –∞–¥–º–∏–Ω—ã —É–≤–∏–¥—è—Ç, –∫—Ç–æ –ø–æ–º–µ–Ω—è–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ)"
                ),
                inline_keyboard_markup=json.dumps([
                    [{"text": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "callbackData": "callback_check_icq_channel"}],
                    [{"text": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤", "callbackData": "callback_config_reply"}],
                    [{"text": f"{button}", "callbackData": f"callback_switch_inline-{button_action}"}],
                ])
            )
        else:
            await bot.send_text(
                chat_id=user_id,
                text="–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É. "
                     "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞."
            )
    except IndexError:
        log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")


async def callbacks_inline(bot, event):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ—É–∫–Ω—Ü–∏–π —Å –æ–±—Ä–∞—Ç–Ω—ã–º –≤—ã–∑–æ–≤–æ–º –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param event: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
    """

    user = event.data['from']['userId']
    message_id = event.data['message'].get('msgId')
    text = event.data['message'].get('text')

    callback_name = event.data['callbackData']

    if callback_name == 'start_inline_message':
        await bot.answer_callback_query(
            query_id=event.data['queryId'],
            text="",
            show_alert=False
        )
        await start_inline_message(bot, event)

    else:
        await callback_middleware_inline_bot(
            bot, user, callback_name, event.data['queryId'], message_id=message_id,
            text=text, event=event
        )


async def message_inline(bot, event):
    """
    –û–±—Ä–∞–±–æ–∫—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param event: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
    """
    bot_name = bot.name
    user_id = event.data['from']['userId']
    message_id = event.data['msgId']
    text = event.data['text'] if 'text' in event.data else ''
    is_admin = util.is_admin(user_id, bot_name)

    if event.from_chat != user_id:
        return

    if not text.startswith("/"):
        if is_admin:
            try:
                _, _, _, quiz, step, _ = select_index(
                    ADMIN_SPACE_NAME, (
                        user_id, bot_name
                    ), index='admin_bot'
                )[0]
                if quiz:
                    await text_middleware_inline_bot(
                        bot, user_id, message_id, quiz, text=text, step=step
                    )
                elif not util.is_bot_active(bot.token):
                    await bot.send_text(
                        chat_id=user_id,
                        text="–ß—Ç–æ–±—ã –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"
                    )
                elif callback_middleware_inline_bot.is_edit_admin_enabled(user_id):
                    await callback_middleware_inline_bot.edit_admin(event.data)
                # elif callback_middleware_inline_bot.is_edit_msg_enabled(user_id):
                #     await callback_middleware_inline_bot.edit_message(event.data)
                #     await callback_middleware_inline_bot.callback_reply_message(bot, event)
                elif not util.get_bot_channel(bot_name):
                    await bot.send_text(
                        chat_id=user_id,
                        text="‚ö†Ô∏è –ß—Ç–æ–±—ã –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–∞—á–∞–ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è,"
                             " –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å",
                        inline_keyboard_markup=json.dumps([
                            [{"text": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "callbackData": "callback_check_icq_channel"}]
                        ])
                    )
                else:
                    # reply message with control buttons
                    await callback_middleware_inline_bot.callback_reply_message(bot, event)

            except IndexError:
                pass
        else:
            await bot.send_text(
                chat_id=user_id,
                text="–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º"
            )


async def on_bot_for_admin(bot, event):
    """
    –í–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    :param bot:
    :param event:
    :return:
    """
    await sub_on_off(bot, event)


async def off_bot_for_admin(bot, event):
    """
    –í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    :param bot:
    :param event:
    :return:
    """
    await sub_on_off(bot, event)


async def sub_on_off(bot, event):
    bot_name = bot.name
    user_id = event.data['from']['userId']

    is_admin = exist_index(
        ADMIN_SPACE_NAME, (
            user_id, bot_name
        ), index='admin_bot'
    )

    if is_admin:
        messages = util.switch_admin_status(
            user_id, bot_name
        )

        await bot.send_text(
            chat_id=user_id,
            text=f"–ë–æ—Ç —Ç–µ–ø–µ—Ä—å {messages}",
            inline_keyboard_markup=json.dumps([
                [{"text": "–ù–∞–∑–∞–¥", "callbackData": "start_inline_message"}],
            ])
        )
