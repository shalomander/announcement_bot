import json
from abc import ABC
import logging
from tarantool.error import DatabaseError

from config import (
    BOT_NAME,
    BOT_SPACE_NAME,
    USER_SPACE_NAME,
    ADMIN_SPACE_NAME,
    LINK_ICQ
)
from response import start_message_inline_bot
from tarantool_utils import (
    select, insert, replace, select_index, delete, upsert
)
import utilities as util

log = logging.getLogger(__name__)


class CallBackMiddlewareBase(ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-—Ñ—É–Ω–∫—Ü–∏–π
    """

    async def __call__(self, bot, user_id, callback_name, query_id, **kwargs):
        """
        :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
        :param user_id: User
        :param callback_name:–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞
        :param query_id: ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback
        :return:
        """

        callback_data = util.parse_callback_name(callback_name)

        self.bot = bot
        self.user_id = user_id
        self.callback_name = callback_data['callback']
        self.query_id = query_id
        self.kwargs = kwargs
        self.callback_params = callback_data['params']
        self.event = self.kwargs['event'].data if 'event' in self.kwargs else None
        self.event_data = self.kwargs['event'].data if 'event' in self.kwargs else []
        self.username = util.extract_username(self.event_data)
        print()
        try:
            await getattr(self, self.callback_name)()
            await self.set_null_callback()
        except AttributeError as e:
            log.error(f"AttributeError in callback_middleware: {e}")

    async def set_null_callback(self):
        """
        –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ callback-—Ñ—É–Ω–∫—Ü–∏–∏
        :return:
        """
        await self.bot.answer_callback_query(
            query_id=self.query_id,
            text="",
            show_alert=False
        )

    async def set_answer_callback(self, text):
        """
        –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ callback-—Ñ—É–Ω–∫—Ü–∏–∏
        :return: None
        """
        await self.bot.answer_callback_query(
            query_id=self.query_id,
            text=text,
            show_alert=False
        )

    async def callback_ignore(self):
        """
        –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        :return:
        """
        await self.set_null_callback()


class CallBackMiddleware(CallBackMiddlewareBase):
    """
    –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ callback-—Ñ—É–Ω–∫—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    """

    async def call_back_instruction(self):
        """
        –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ @metabot
        """

        await self.bot.send_text(
            chat_id=self.user_id,
            text=(
                f"–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è @metabot:\n"
                f"1) –û—Ç–∫—Ä–æ–π @metabot\n"
                f"2) –°–æ–∑–¥–∞–π –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /newbot\n"
                f"3) –ü—Ä–∏–¥—É–º–∞–π –Ω–∏–∫–Ω–µ–π–º —Å–≤–æ–µ–º—É –±–æ—Ç—É-–ø–æ–º–æ—à–Ω–∏–∫—É. "
                f'–ù–∏–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ ‚Äúbot‚Äù üëá'
                f"https://files.icq.net/get/0dQlW000hNBmuU2TvlRRUP5ed263b51ae\n"
                f"4) –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /setjoingroups –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ üëá\n"
                f"https://files.icq.net/get/0dC9G000CFJARbEleLxsxl5ed263de1ae\n"
                f"–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ 5-7 –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∏ –Ω—É–∂–Ω—ã –¥–ª—è –¥–æ–ø. –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞:\n"
                f"5) –ü—Ä–∏–¥—É–º–∞–π –∏–º—è —Å–≤–æ–µ–º—É –±–æ—Ç—É /setname üëá\n"
                f"https://files.icq.net/get/0dYaO000MquODLncJY3uMB5ed2642f1ae\n"
                f"6) –£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ /setdescription üëá\n"
                f"https://files.icq.net/get/0dUaY000WcqonvlVrDFAcS5ed264621ae\n"
                f"7) –ü—Ä–∏—à–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ /setuserpic üëá\n"
                f"https://files.icq.net/get/0dKj8000frHsEa2YyUS1zE5ed266211ae\n"
                f"‚ö†Ô∏è –í–∞–∂–Ω–æ: –ø–µ—Ä–µ—à–ª–∏ @{self.bot.name} —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–≤–æ–µ–º –±–æ—Ç–µ üëá\n"
                f"https://files.icq.net/get/0aE48000e9N8zzuD0O1VBt5ed266931ae"
            )
        )
        await self.set_null_callback()

    async def call_back_bot_connect(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–æ—Ç–µ
        """
        _, bot_token, bot_id, bot_nick = select(USER_SPACE_NAME, self.user_id)[0]
        replace(USER_SPACE_NAME, (self.user_id, '', '', ''))

        try:
            insert(BOT_SPACE_NAME, (
                self.user_id,
                bot_token,
                bot_id,
                bot_nick,
                False,
                start_message_inline_bot,
                ''
            ))

            insert(ADMIN_SPACE_NAME, (
                self.user_id, bot_nick, True, '', 0, ''
            ))
            await self.kwargs['bot_callbacks']['start'](bot_nick)

        except DatabaseError:
            await self.bot.send_text(
                self.user_id,
                text="–ë–æ—Ç —Å —Ç–∞–∫–∏–º botId —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω",
                inline_keyboard_markup=json.dumps([
                    [{"text": "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", "callbackData": "callback_start"}],
                ])
            )

        else:
            await self.bot.send_text(
                self.user_id,
                text=(
                    f"–¢–≤–æ–π –±–æ—Ç @{bot_nick} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n"
                    f"–û—Ç–∫—Ä–æ–π @{bot_nick} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ "
                    f"–±–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã"
                ),
                inline_keyboard_markup=json.dumps([
                    [{"text": "–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞", "url": f"https://icq.im/{bot_nick}"}],
                    [{"text": "–°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞", "callbackData": "callback_start"}],
                ])
            )
        await self.set_null_callback()


callback_middleware = CallBackMiddleware()


class CallBackMiddlewareInlineBot(CallBackMiddlewareBase):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª-–±—ç–∫ —Ñ—É–Ω–∫—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞
    """

    edit_admin_mode = {}
    edit_message_mode = {}

    def is_edit_admin_enabled(self) -> bool:
        return bool(self.edit_admin_mode.get(self.user_id, False))

    def is_edit_msg_enabled(self) -> bool:
        return bool(self.edit_message_mode.get(self.user_id, False))

    async def callback_switch_inline(self):
        """
        –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        :return:
        """
        new_bot_state = self.callback_params[0] if len(self.callback_params) else None
        util.switch_inline_status(self.bot.name, util.str_to_bool(new_bot_state))
        msg_id = self.event['message']['msgId']
        chat_id = self.event['message']['chat']['chatId']
        msg_text = self.event['message']['text']
        buttons = self.event['message']['parts'][0]['payload']
        is_active = util.is_admin_active(
            self.user_id, self.bot.name
        )

        if is_active:
            admin_message = f"–ê–¥–º–∏–Ω @{self.username} –≤–∫–ª—é—á–∏–ª –±–æ—Ç–∞"
            switch_button_text = '‚õî Ô∏è–í—ã–∫–ª—é—á–∏—Ç—å'
            switch_button_action = 'disable'
        else:
            admin_message = f"–ê–¥–º–∏–Ω @{self.username} –≤—ã–∫–ª—é—á–∏–ª –±–æ—Ç–∞"
            switch_button_text = '–í–∫–ª—é—á–∏—Ç—å'
            switch_button_action = 'enable'

        buttons[-1] = [
            {"text": f"{switch_button_text}", "callbackData": f"callback_switch_inline-{switch_button_action}"}]
        await self.bot.edit_text(
            chat_id=chat_id,
            msg_id=msg_id,
            text=msg_text,
            inline_keyboard_markup=json.dumps(buttons)
        )

        # send notification to other admins
        admins = util.get_admins(self.bot.name)
        admins.remove(self.user_id)
        for admin in admins:
            admin_id = admin[0]
            await self.bot.send_text(
                chat_id=admin_id,
                text=admin_message
            )
        # if is_active:
        #     message = (
        #         f"–¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ "
        #         f"@{self.bot.name}, –Ω–∞—á–Ω—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏ –≤–∞–º.\n"
        #         "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /off –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ ‚Äú–í—ã–∫–ª—é—á–∏—Ç—å‚Äù"
        #     )
        #     switch_button_text = '–í—ã–∫–ª—é—á–∏—Ç—å'
        # else:
        #     message = (
        #         "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω–æ. –°–æ–æ–±—â–µ–Ω–∏—è? –∫–æ—Ç–æ—Ä—ã–µ "
        #         "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –±–æ—Ç–∞, –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã"
        #     )
        #     switch_button_text = '–í–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ'
        # inline_keyboard = [
        #     [{"text": f"{switch_button_text}", "callbackData": "callback_switch_inline"}],
        #     [{"text": "–ù–∞–∑–∞–¥", "callbackData": "start_inline_message"}],
        # ]
        # await self.bot.send_text(
        #     chat_id=self.user_id,
        #     text=message,
        #     inline_keyboard_markup=json.dumps(inline_keyboard)
        # )
        await self.set_null_callback()

    async def callback_on_off_success(self):
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: None
        """
        message = util.switch_admin_status(
            self.user_id, self.bot.name
        )

        await self.set_answer_callback(
            f"–¢–µ–ø–µ—Ä—å –±–æ—Ç {message}"
        )

    async def callback_change_start_message(self):
        """
        –°–º–µ–Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        :return:
        """

        try:
            util.change_index_tuple_admin(self.user_id, self.bot.name, {
                '3': "change_start_message",
                "4": 1
            })

            await self.bot.send_text(
                self.user_id,
                text=(
                    "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ "
                    "—Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥—è—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–æ–≥–¥–∞ "
                    "–æ—Ç–∫—Ä–æ—é—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
                ),
                inline_keyboard_markup=json.dumps([
                    [{"text": "–û—Ç–º–µ–Ω–∞", "callbackData": "start_inline_message"}],
                ])
            )

        except IndexError:
            log.error("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

        else:
            await self.set_null_callback()

    async def callback_change_start_message_success(self):
        """
        –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        :return:
        """

        try:
            new_message = select_index(
                ADMIN_SPACE_NAME, (
                    self.user_id, self.bot.name
                ), index='admin_bot'
            )[0][-1]

            bot_info = select_index(BOT_SPACE_NAME, self.bot.name, index='bot')[0]
            bot_info[-2] = new_message

            replace(BOT_SPACE_NAME, bot_info)

            util.change_index_tuple_admin(self.user_id, self.bot.name, {
                "3": "",
                "4": 1,
                "5": ""
            })

            await self.bot.send_text(
                self.user_id,
                text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
                inline_keyboard_markup=json.dumps([
                    [{"text": "–ù–∞–∑–∞–¥", "callbackData": "start_inline_message"}],
                ])
            )

        except IndexError:
            log.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

        await self.set_null_callback()

    async def callback_check_icq_channel(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–∫–∏
        :return:
        """

        try:
            icq_channel = select_index(BOT_SPACE_NAME, self.bot.name, index='bot')[0][-1]
            if icq_channel:
                await self.bot.send_text(
                    self.user_id,
                    text=(
                        f"–ë–æ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É {LINK_ICQ}/{icq_channel}\n"
                        "–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª?"
                    ),
                    inline_keyboard_markup=json.dumps([
                        [{"text": "–î–∞", "callbackData": "callback_add_new_icq_channels"}],
                        [{"text": "–ù–µ—Ç", "callbackData": "start_inline_message"}],
                    ])
                )
            else:
                await self.callback_add_new_icq_channels()
        except IndexError:
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–ø—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è")
        finally:
            await self.set_null_callback()

    async def callback_config_reply(self):
        """
        –í—ã–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        :return:
        """
        await self.bot.send_text(
            self.user_id,
            text=(
                "–£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞:\n"
                "1) –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"
                " –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞ - \"–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\"\n"
                "2) –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ - \"–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\""
            ),
            inline_keyboard_markup=json.dumps([
                [{"text": "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ωa", "callbackData": "reply_add_admin"}],
                [{"text": "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", "callbackData": "reply_disable"}],
                [{"text": "–û—Ç–º–µ–Ω–∞", "callbackData": "start_inline_message"}],
            ])
        )

    async def reply_add_admin(self):
        """
        –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
        :return:
        """
        self.edit_admin_mode[self.user_id] = 'add'
        await self.bot.send_text(
            self.user_id,
            text=(
                "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å."
            ),
            inline_keyboard_markup=json.dumps([
                [{"text": "–ù–∞–∑–∞–¥", "callbackData": "reply_cancel"}],
            ])
        )

    async def reply_add_group(self):
        """
        –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø
        :return:
        """
        self.edit_admin_mode[self.user_id] = 'add_group'
        await self.bot.send_text(
            self.user_id,
            text=(
                "–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–≤–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É —Å –∞–¥–º–∏–Ω–∞–º–∏:\n"
                f"1) –¥–æ–±–∞–≤–∏—Ç—å @{self.bot.name} –≤ –≥—Ä—É–ø–ø—É\n"
                "2) –ø—Ä–∏—Å–ª–∞—Ç—å —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É"
            ),
            inline_keyboard_markup=json.dumps([
                [{"text": "–ù–∞–∑–∞–¥", "callbackData": "reply_cancel"}],
            ])
        )

    async def edit_admin(self, event_data):
        message_type = event_data['parts'][0]['type'] if 'parts' in event_data else 'message'
        edit_mode = self.edit_admin_mode.get(self.user_id, False)
        link = admin_id = ''
        if message_type == 'mention':
            admin_id = event_data['parts'][0]['payload']['userId']
        else:
            link = util.parse_group_link(event_data['text'])
        if edit_mode == 'add':
            await self.add_admin(admin_id)
        elif edit_mode == 'add_group':
            await self.add_group(link)
        elif edit_mode == 'remove':
            await self.remove_admin(admin_id or link)
        self.edit_admin_mode.pop(self.user_id)

    async def add_admin(self, new_admin_id: int):
        """
        –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        :return:
        """
        response = await self.bot.get_chat_info(new_admin_id)
        if response.get("ok"):
            username = response.get('nick') or new_admin_id
            try:
                insert(ADMIN_SPACE_NAME, (
                    new_admin_id, self.bot.name, True, '', 0, ''
                ))
            except DatabaseError:
                await self.bot.send_text(
                    self.user_id,
                    text=(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ @{username}"
                    )
                )
            else:
                await self.bot.send_text(
                    self.user_id,
                    text=(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–∞–∑–Ω–∞—á–µ–Ω –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.\n"
                        f"‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –°–ê–ú –æ—Ç–∫—Ä—ã—Ç—å @{self.bot.name} –∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –µ–≥–æ, "
                        "—á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"
                    )
                )
        else:
            await self.bot.send_text(
                self.user_id,
                text=(
                    "–û—à–∏–±–∫–∞\n\n"
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                )
            )
        await self.callback_config_reply()

    async def add_group(self, new_group_link):
        """
        –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–æ–≤
        :return:
        """
        group_id = util.ltrim(new_group_link, 'https://icq.im/')
        response = await self.bot.get_chat_info(group_id)
        if response.get("ok"):
            try:
                insert(ADMIN_SPACE_NAME, (
                    group_id, self.bot.name, True, '', 0, ''
                ))
            except DatabaseError:
                await self.add_group_error()
            else:
                await self.bot.send_text(
                    self.user_id,
                    text=(
                        "–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É (–∫–∞–Ω–∞–ª) –∏ –≤—Å–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"
                        "–≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –∏–º–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å (–≤  —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ü—Ä–µ–¥–ª–æ–∂–∫–∞)\n"
                        f"@{group_id}"
                    )
                )
        else:
            await self.add_group_error()

    async def add_group_error(self):
        await self.bot.send_text(
            self.user_id,
            text=(
                "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–∞–ª–∏–¥–Ω–∞ –∏ —á—Ç–æ –±–æ—Ç @{self.bot.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –ø–∏—Å–∞—Ç—å —Ç—É–¥–∞.\n"
            ),
            inline_keyboard_markup=json.dumps([
                [{"text": "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "callbackData": "reply_add_group"}],
                [{"text": "–ù–∞–∑–∞–¥", "callbackData": "reply_cancel"}],
            ])
        )

    async def remove_admin(self, admin_id: int):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        :return:
        """
        username = None
        response = await self.bot.get_chat_info(admin_id)
        if response.get("ok"):
            username = response.get('nick') or admin_id
        try:
            delete(ADMIN_SPACE_NAME, (admin_id, self.bot.name))
        except DatabaseError:
            await self.bot.send_text(
                self.user_id,
                text=(
                    f"–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ @{username}"
                )
            )
        else:
            await self.bot.send_text(
                self.user_id,
                text=(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞."
                )
            )
        await self.callback_config_reply()

    async def reply_disable(self):
        """
        –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –∏ –≥—Ä—É–ø–ø
        :return:
        """

        self.edit_admin_mode[self.user_id] = 'remove'
        admin_list_text = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n"
        admin_list_index = 1
        admins = select_index(ADMIN_SPACE_NAME, self.bot.name, index='bot_nick')
        for admin in admins:
            response = await self.bot.get_chat_info(admin[0])
            if response.get("ok"):
                if response.get('type') == 'private':
                    admin_list_text += f"{admin_list_index}) @{response.get('nick') or admin[0]}\n"
                    admin_list_index += 1
        await self.bot.send_text(
            self.user_id,
            text=(
                "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å.\n\n "
                f"{admin_list_text}\n"
            ),
            inline_keyboard_markup=json.dumps([
                [{"text": "–ù–∞–∑–∞–¥", "callbackData": "reply_cancel"}],
            ])
        )

    async def reply_cancel(self):
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        :return:
        """
        await self.callback_config_reply()

    async def callback_add_new_icq_channels(self):
        """
        –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–∫–µ –ø—Ä–µ–¥–ª–æ–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return:
        """

        util.change_index_tuple_admin(self.user_id, self.bot.name, {
            '3': "set_icq_channel",
            "4": 1
        })

        await self.bot.send_text(
            self.user_id,
            text=(
                "–ß—Ç–æ–±—ã –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–∞—á–∞–ª–∏ –ø—É–±–ª–∏–∫–æ–≤—ã–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ:\n"
                f"1) –î–æ–±–∞–≤–∏—Ç—å @{self.bot.name} –≤ –∫–∞–Ω–∞–ª\n"
                '2) –°–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n'
                "3) –ü—Ä–∏—Å–ª–∞—Ç—å —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª\n"
                "‚ö†Ô∏è –í–ê–ñ–ù–û: –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω"
            ),
            inline_keyboard_markup=json.dumps([
                [{"text": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏", "callbackData": "error_for_add_icq_channel"}],
                [{"text": "–û—Ç–º–µ–Ω–∞", "callbackData": "start_inline_message"}],
            ])
        )
        await self.set_null_callback()

    async def error_for_add_icq_channel(self):
        """
        –£–∫–∞–∑–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –≤—ã–æ–∑–Ω–∏–∫–≤–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫
        :return:
        """
        await self.bot.send_text(
            self.user_id,
            text=(
                "–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –Ω—É–∂–Ω–æ:\n"
                "1) –û—Ç–∫—Ä–æ–π @metabot\n"
                "2) –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /setjoingroups –∏ –ø–æ—Å–ª–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞\n"
                "https://files.icq.net/get/0dC9G000CFJARbEleLxsxl5ed263de1ae"
            ),
            inline_keyboard_markup=json.dumps([
                [{"text": "–ù–∞–∑–∞–¥", "callbackData": "callback_add_new_icq_channels"}],
            ])
        )

        await self.set_null_callback()

    async def callback_set_icq_channel_success(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ icq-–∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–∫–∏
        :return:
        """
        try:
            icq_channel = select(
                ADMIN_SPACE_NAME, (self.user_id, self.bot.name)
            )[0][-1]
            response = await self.bot.get_chat_admins(icq_channel)
            if not response.get('ok'):
                await self.bot.send_text(
                    self.user_id,
                    text=(
                        "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                        f"–ë–æ—Ç @{self.bot.name} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –ø–∏—Å–∞—Ç—å —Ç—É–¥–∞.\n\n"
                    ),
                    inline_keyboard_markup=json.dumps([
                        [{"text": "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "callbackData": "callback_set_icq_channel_success"}],
                        [{"text": "–û—Ç–º–µ–Ω–∞", "callbackData": "start_inline_message"}],
                    ])
                )
            else:
                util.set_null_admin_tuple(self.user_id, self.bot.name)
                bot_info = select_index(BOT_SPACE_NAME, self.bot.name, index='bot')[0]
                bot_info[-1] = icq_channel
                replace(BOT_SPACE_NAME, bot_info)
                await self.bot.send_text(
                    self.user_id,
                    text=(
                        "–û–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n\n"
                        "–¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –≤ –º–µ–Ω—è, "
                        "–∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ –µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏ –∑–∞–ø–∏–Ω–∏—Ç—å"
                    ),
                    inline_keyboard_markup=json.dumps([
                        [{"text": "–ù–∞–∑–∞–¥", "callbackData": "start_inline_message"}],
                    ])
                )
        except IndexError:
            pass
        finally:
            await self.set_null_callback()

    async def callback_switch_anonymous(self):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
        :return:
        """
        is_anon = util.str_to_bool(self.callback_params[0])
        util.change_anonymous_status(self.user_id, is_anon)
        if is_anon:
            text = "–í–∫–ª—é—á–µ–Ω –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–µ–∂–∏–º. –í—Å–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–Ω–æ–Ω–∏–º–Ω–æ"
            callback_text = "–û—Ç–∫–ª—é—á–∏—Ç—å"
        else:
            text = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω. –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ —É–≤–∏–¥–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
            callback_text = "–í–∫–ª—é—á–∏—Ç—å"

        await self.bot.send_text(
            self.user_id,
            text=text,
            inline_keyboard_markup=json.dumps([
                [{"text": callback_text, "callbackData": f"callback_switch_anonymous-{not is_anon}"}],
            ])
        )
        await self.set_null_callback()

    async def callback_set_true_user_anonymous(self):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
        :return:
        """
        util.change_anonymous_status(self.user_id, True)
        await self.bot.send_text(
            self.user_id,
            text=(
                "–í–∫–ª—é—á–µ–Ω –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–µ–∂–∏–º. –í—Å–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–Ω–æ–Ω–∏–º–Ω–æ"
            ),
            inline_keyboard_markup=json.dumps([
                [{"text": "–û—Ç–∫–ª—é—á–∏—Ç—å", "callbackData": "callback_set_false_user_anonymous"}],
            ])
        )
        await self.set_null_callback()

    async def callback_set_false_user_anonymous(self):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
        :return:
        """
        util.change_anonymous_status(self.user_id, False)
        await self.bot.send_text(
            self.user_id,
            text=(
                "–ê–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω. –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ —É–≤–∏–¥–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
            ),
            inline_keyboard_markup=json.dumps([
                [{"text": "–í–∫–ª—é—á–∏—Ç—å", "callbackData": "callback_set_true_user_anonymous"}],
            ])
        )
        await self.set_null_callback()

    async def callback_send_post(self):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
        :return:
        """
        try:
            icq_channel = util.get_bot_channel(self.bot.name)
            original_msg_id = self.callback_params[0]
            if 'parts' in self.event_data['message']:
                text = self.event_data['message']['parts'][0]['payload']['message']['text']

                # send original text to target channel
                target_msg = await self.bot.send_text(
                    chat_id=icq_channel,
                    text=text
                )
                insert('channel_messages', (target_msg.get('msgId'), text))

                # forward original message to admins
                admins = util.get_admins(self.bot.name)
                admins.remove(self.user_id)
                for admin in admins:
                    admin_id = admin[0]
                    await self.bot.send_text(
                        chat_id=admin_id,
                        forward_chat_id=self.user_id,
                        forward_msg_id=original_msg_id
                    )

                # edit replied message
                replied_id = self.event_data['message']['msgId']
                inline_keyboard = [
                    [{"text": "–ó–∞–∫—Ä–µ–ø–∏—Ç—å –≤ —á–∞—Ç–µ?", "callbackData": f"callback_pin_msg-{target_msg.get('msgId')}"}],
                    [{"text": "–ì–æ—Ç–æ–≤–æ", "callbackData": f"callback_disable_buttons-{replied_id}"}],
                ]
                self.bot.edit_text(
                    msg_id=replied_id,
                    text="–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º",
                    inline_keyboard_markup=json.dumps(inline_keyboard)
                )

        except IndexError as e:
            log.error(f"IndexError in callback_send_post: {e}")

    async def callback_delete_post(self):
        try:
            await self.bot.delete_messages(
                chat_id=self.user_id,
                msg_id=self.event_data['message']['msgId']
            )
        except IndexError:
            pass

    async def callback_delete_fwd(self):
        try:
            icq_channel = util.get_bot_channel(self.bot.name)
            fwd_id = self.callback_params[0]
            fwd_text = self.event_data['parts'][0]['payload']['message']['text']
            # delete forwarded message
            await self.bot.delete_messages(
                chat_id=icq_channel,
                msg_id=fwd_id
            )

            # forward notification to admins
            admins = util.get_admins(self.bot.name)
            admins.remove(self.user_id)
            for admin in admins:
                admin_id = admin[0]
                await self.bot.send_text(
                    chat_id=admin_id,
                    text=f"@{self.username} —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
                         f"{fwd_text}"
                )

            # edit replied message
            await self.callback_disable_buttons(True)
        except IndexError:
            pass

    async def callback_edit_fwd(self):
        control_msg_id = self.callback_params[0]
        message_id = self.callback_params[1]
        self.edit_message_mode[self.user_id] = [message_id, control_msg_id]
        inline_keyboard = [
            [{"text": "–ù–∞–∑–∞–¥", "callbackData": f"callback_reply_message-{message_id}"}],
        ]
        await self.bot.send_text(
            chat_id=self.user_id,
            text="–ü—Ä–∏—à–ª–∏ –º–Ω–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ü–µ–ª–∏–∫–æ–º.",
            inline_keyboard_markup=json.dumps(inline_keyboard)
        )

    async def edit_message(self, event_data):
        old_message_id, control_msg_id = self.edit_message_mode.pop(self.user_id)
        new_message_id = event_data['msgId']
        inline_keyboard = [
            [{"text": "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∫–∏", "callbackData": f"callback_update_post-{old_message_id}"}],
            [{"text": "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å\n–∫–∞–∫ –Ω–æ–≤–æ–µ", "callbackData": f"callback_send_post-{new_message_id}"}],
            [{"text": "–ù–∞–∑–∞–¥", "callbackData": f"callback_reply_message-{old_message_id}"}],
        ]
        await self.bot.send_text(
            chat_id=self.user_id,
            reply_msg_id=new_message_id,
            text="–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º?",
            inline_keyboard_markup=json.dumps(inline_keyboard)
        )

    async def callback_update_post(self):
        update_message_id = self.callback_params[0]
        # control_message_id = self.event_data['message']['msgId']
        old_text = select('channel_messages', update_message_id)[0][1]
        text = self.event_data['message']['parts'][0]['payload']['message']['text']
        # icq_channel = util.get_bot_channel(self.bot.name)

        # update target message text
        await self.bot.edit_text(
            msg_id=update_message_id,
            text=text
        )

        upsert('channel_messages', (update_message_id, text), ((1, '=', text),))

        # forward original message to admins
        admins = util.get_admins(self.bot.name)
        admins.remove(self.user_id)
        for admin in admins:
            admin_id = admin[0]
            await self.bot.send_text(
                chat_id=admin_id,
                forward_chat_id=self.user_id,
                forward_msg_id=self.event_data['parts'][0]['payload']['message']['msgId'],
                text=f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{old_text}"
            )

        # edit replied message
        replied_id = self.event_data['message']['msgId']
        inline_keyboard = [
            [{"text": "–ó–∞–∫—Ä–µ–ø–∏—Ç—å –≤ —á–∞—Ç–µ?", "callbackData": f"callback_pin_msg-{update_message_id}"}],
            [{"text": "–ì–æ—Ç–æ–≤–æ", "callbackData": f"callback_disable_buttons-{replied_id}"}],
        ]
        self.bot.edit_text(
            msg_id=replied_id,
            text="–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º",
            inline_keyboard_markup=json.dumps(inline_keyboard)
        )

    async def callback_pin_msg(self):
        try:
            pin_msg_id = self.callback_params[0]
            icq_channel = util.get_bot_channel(self.bot.name)

            # pin target message
            self.bot.pin_message(
                chat_id=icq_channel,
                msg_id=pin_msg_id
            )

            # send notification to other admins
            admins = util.get_admins(self.bot.name)
            admins.remove(self.user_id)
            for admin in admins:
                admin_id = admin[0]
                await self.bot.send_text(
                    chat_id=admin_id,
                    forward_chat_id=self.user_id,
                    forward_msg_id=pin_msg_id,
                    text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –ê–¥–º–∏–Ω–æ–º @{self.username}"
                )

            # edit controls in replied message
            replied_id = self.event_data['message']['msgId']
            inline_keyboard = []
            self.bot.edit_text(
                msg_id=replied_id,
                text="–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º",
                inline_keyboard_markup=json.dumps(inline_keyboard)
            )

        except IndexError:
            pass

    async def callback_disable_buttons(self, deleted=False):
        replied_id = self.event_data['message']['msgId']
        text = self.event_data['message']['text']
        inline_keyboard = []
        self.bot.edit_text(
            msg_id=replied_id,
            text='–£–¥–∞–ª–µ–Ω–æ' if deleted else text,
            inline_keyboard_markup=json.dumps(inline_keyboard)
        )

    async def callback_reply_message(self):
        message_id = self.callback_params[0] if len(self.callback_params) else self.event.data['msgId']
        is_fwd = util.is_fwd_from_channel(self.event)
        inline_keyboard = []
        if is_fwd:
            fwd_msg_id = util.get_fwd_id(self.event)
            inline_keyboard.append([{"text": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                     "callbackData": f"callback_edit_fwd-{fwd_msg_id}-{message_id}"}])
            inline_keyboard.append([{"text": "–£–¥–∞–ª–∏—Ç—å",
                                     "callbackData": f"callback_delete_fwd-{fwd_msg_id}"}])
            inline_keyboard.append([{"text": "–ü—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å\n –∫–∞–∫ –Ω–æ–≤–æ–µ",
                                     "callbackData": f"callback_send_post-{fwd_msg_id}"}])

        else:
            inline_keyboard.append([{"text": "–û–ø—É–±–ª–∏–∫–æ–≤—Ç—å",
                                     "callbackData": f"callback_send_post-{message_id}"}])
        inline_keyboard.append([{"text": "–û—Ç–º–µ–Ω–∞", "callbackData": f"callback_delete_post"}])
        await self.bot.send_text(
            chat_id=self.user_id,
            text="–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º?",
            reply_msg_id=message_id,
            inline_keyboard_markup=json.dumps(inline_keyboard)
        )


callback_middleware_inline_bot = CallBackMiddlewareInlineBot()
