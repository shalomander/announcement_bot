import json
import logging
import callback

from config import (
    ADMIN_SPACE_NAME,
    USER_SPACE_NAME,
)
import utilities as util
import db
log = logging.getLogger(__name__)
main_bot_callbacks = {}
cb_processor = callback.CallbackProcessor()


async def start(bot, event):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = event.data['from']['userId']
    inline_keyboard = [
        [{"text": "ü§ñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è @metabot", "callbackData": "instruction"}]
    ]
    await bot.send_text(
        chat_id=user,
        text=(
            "–ü—Ä–∏–≤–µ—Ç, —è —Å–æ–∑–¥–∞—é –±–æ—Ç–æ–≤-–æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø\n\n"
            "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –±–æ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n"
            "- –¢—ã —Ö–æ—á–µ—à—å –∏–º–µ—Ç—å –µ–¥–∏–Ω—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ—Å—Ç–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª"
            " –≠—Ç–æ –≤–∞–∂–Ω–æ –≤ —Å–ª—É—á–∞–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –≤–µ–¥—É—â–∏—Ö –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª\n"
            "- –¢—ã —Ö–æ—á–µ—à—å –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö\n\n"
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:\n"
            "1) –°–æ–∑–¥–∞–π –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é @metabot (–ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ –∫–Ω–æ–ø–∫–µ \"ü§ñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è @metabot\")\n"
            f"2) –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ (@{bot.name}) —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–≤–æ–µ–º –Ω–æ–≤–æ–º –±–æ—Ç–µ –æ—Ç @metabot\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:\n"
            "https://files.icq.net/get/0aE48000e9N8zzuD0O1VBt5ed266931ae"
        ),
        inline_keyboard_markup=json.dumps(inline_keyboard)
    )


async def callbacks(bot, event):
    callback_name = event.data['callbackData']
    if callback_name == 'callback_start':
        await bot.answer_callback_query(
            query_id=event.data['queryId'],
            text="",
            show_alert=False
        )
        await start(bot, event)
    else:
        cb_event = await callback.UserEvent.init(bot, event)
        await cb_processor(cb_event)


async def message(bot, event):
    user = event.data['from']['userId']
    message_id = event.data['msgId']
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ
        text = event.data['parts'][0]['payload']['message']['text']
    except KeyError:
        # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏
        text = event.data['text']
    try:
        secret_bot = util.parse_bot_info(text)
        if 'token' in secret_bot:
            if await util.validate_token(secret_bot['token']):
                db.replace(USER_SPACE_NAME, (
                    user,
                    secret_bot['token'], secret_bot['botId'], secret_bot['nick']
                ))
                await bot.send_text(
                    chat_id=user,
                    reply_msg_id=message_id,
                    text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞?",
                    inline_keyboard_markup=json.dumps([
                        [{"text": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å", "callbackData": "connect_bot"}],
                        [{"text": "–û—Ç–º–µ–Ω–∞", "callbackData": "callback_start"}],
                    ])
                )
            else:
                await bot.send_text(
                    chat_id=user,
                    reply_msg_id=message_id,
                    text="–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω\n"
                )
    except KeyError as e:
        log.error(e)


# Inline bot
async def start_inline_message(bot, event):
    cb_event = await callback.UserEvent.init(bot, event)
    await cb_processor.start_inline_message(cb_event)


async def callbacks_inline(bot, event):
    cb_event = await callback.UserEvent.init(bot, event)
    await cb_processor(cb_event)


async def message_inline(bot, event):
    cb_event = await callback.UserEvent.init(bot, event)
    bot_name = bot.name
    user_id = event.data['from']['userId']
    text = event.data['text'] if 'text' in event.data else ''
    is_admin = util.is_admin(user_id, bot_name)

    if event.from_chat != user_id:
        return

    if not text.startswith("/"):
        if is_admin:
            try:
                _, _, _, quiz, step, _ = db.select_index(
                    ADMIN_SPACE_NAME, (
                        user_id, bot_name
                    ), index='admin_bot'
                )[0]
                if quiz:
                    await cb_processor.set_icq_channel(cb_event)
                elif cb_event.wait_user_for is not None:
                    cb_event.callback_name = cb_event.wait_user_for
                    await cb_processor(cb_event)
                elif not util.is_bot_active(bot.token):
                    await bot.send_text(
                        chat_id=user_id,
                        text="–ß—Ç–æ–±—ã –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"
                    )
                elif not util.get_bot_channel(bot_name):
                    await bot.send_text(
                        chat_id=user_id,
                        text="‚ö†Ô∏è –ß—Ç–æ–±—ã –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–∞—á–∞–ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è,"
                             " –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å",
                        inline_keyboard_markup=json.dumps([
                            [{"text": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "callbackData": "callback_check_icq_channel"}]
                        ])
                    )
                else:
                    await cb_processor.reply_message(cb_event)
            except IndexError as e:
                log.error(e)
        else:
            await bot.send_text(
                chat_id=user_id,
                text="–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º"
            )


async def bot_enable(bot, event):
    cb_event = await callback.UserEvent.init(bot, event)
    cb_processor.switch_inline(cb_event, True)
    await sub_on_off(bot, event)


async def bot_disable(bot, event):
    cb_event = await callback.UserEvent.init(bot, event)
    cb_processor.switch_inline(cb_event, False)
    await sub_on_off(bot, event)


async def sub_on_off(bot, event):
    user_id = event.data['from']['userId']
    is_active = util.is_bot_active(bot.token)
    await bot.send_text(
            chat_id=user_id,
            text=f"–ë–æ—Ç —Ç–µ–ø–µ—Ä—å {'–∞–∫—Ç–∏–≤–µ–Ω' if is_active else '–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}",
            inline_keyboard_markup=json.dumps([
                [{"text": "–ù–∞–∑–∞–¥", "callbackData": "start_inline_message"}],
            ])
        )
